//
//  ATProtoClientGeneratedMain.swift
//  Petrel
//
//  Created by Josh LaCalamito on 1/19/24.
//

import Foundation

// MARK: - Authentication Method Enum

/// Enum to represent the available authentication methods.
public enum AuthMethod: Sendable {
  case legacy
  case oauth
}

// MARK: - API Error Enum

/// Errors that can occur during API operations
enum APIError: String, Error {
  case expiredToken = "ExpiredToken"
  case invalidToken
  case invalidResponse
  case methodNotSupported
  case authorizationFailed
  case invalidPDSURL
  case serviceNotInitialized = "AuthenticationService not initialized"
}

// MARK: - Initialization State Enum

/// States for the initialization process
enum InitializationState: Equatable {
  static func == (lhs: InitializationState, rhs: InitializationState) -> Bool {
    switch (lhs, rhs) {
    case (.uninitialized, .uninitialized):
      return true
    case (.initializing, .initializing):
      return true
    case (.ready, .ready):
      return true
    case (.failed(let error1), .failed(let error2)):
      return error1.localizedDescription == error2.localizedDescription
    default:
      return false
    }
  }

  case uninitialized
  case initializing
  case ready
  case failed(Error)

}

// MARK: - Client Environment Enum

/// Defines the environment for the client
public enum ClientEnvironment: Sendable {
  case production
  case testing
}

// MARK: - Authentication Delegate

/// Delegate protocol for authentication events.
public protocol AuthenticationDelegate: AnyObject, Sendable {
    /// Called when authentication is required.
    /// - Parameter client: The ATProtoClient that requires authentication.
    func authenticationRequired(client: ATProtoClient)
}

// MARK: - ATProtoClient Actor

/// The main client for interacting with the AT Protocol.
public actor ATProtoClient {
    // MARK: - Properties
    
    /// The network service used for all API requests.
    private let networkService: NetworkService
    
    /// The authentication service handling OAuth and token management.
    private let authService: AuthenticationService
    
    /// The account manager for handling multiple accounts.
    private let accountManager: AccountManager
    
    /// The DID resolver for resolving DIDs to handles and PDS URLs.
    private let didResolver: DIDResolving
    
    /// The storage layer for persistent data.
    private let storage: KeychainStorage
    
    /// The delegate for authentication events.
    private weak var authDelegate: AuthenticationDelegate?
    
    /// Namespaces for the AT Protocol APIs.
    
    // MARK: - Initialization
    
    /// Initializes a new ATProtoClient with the specified configuration.
    /// - Parameters:
    ///   - baseURL: The base URL for API requests (default: bsky.social).
    ///   - oauthConfig: The OAuth configuration.
    ///   - namespace: The namespace for storage.
    ///   - userAgent: Optional user agent string for requests.
    ///   - didResolver: Optional custom DID resolver implementation.
    public init(
        baseURL: URL = URL(string: "https://bsky.social")!,
        oauthConfig: OAuthConfig,
        namespace: String,
        userAgent: String? = nil,
        didResolver: DIDResolving? = nil
    ) async {
        // Initialize storage first
        self.storage = KeychainStorage(namespace: namespace)
        
        // Initialize account manager
        self.accountManager = await AccountManager(storage: storage)
        
        // Initialize network service first with nil authService
        self.networkService = NetworkService(baseURL: baseURL)
        
        if let userAgent = userAgent {
            await networkService.setUserAgent(userAgent)
        }
        // Create or use provided DID resolver before using it
        if let providedResolver = didResolver {
            self.didResolver = providedResolver
        } else {
            self.didResolver = await DIDResolutionService(networkService: networkService)
        }
        
        // Initialize auth service after networkService and didResolver
        self.authService = AuthenticationService(
            storage: storage,
            accountManager: accountManager,
            networkService: networkService,
            oauthConfig: oauthConfig,
            didResolver: self.didResolver
        )
        
        // Now set the authentication provider on the network service
        await networkService.setAuthenticationProvider(authService)
                
        // Try to initialize from stored account
        await initializeFromStoredAccount()
    }
    
    // MARK: - Initialization Helpers

    /// Attempts to initialize the client from a stored account.
    private func initializeFromStoredAccount() async {
        if let account = await accountManager.getCurrentAccount() {
            // Update the network service base URL
            networkService.setBaseURL(account.pdsURL)

            // Check for interrupted refresh operations
            await handleAppStartup()

            // Check if tokens need refreshing
            do {
                _ = try await authService.refreshTokenIfNeeded()
            } catch let error as AuthError where error == .dpopKeyError {
                // If it's a DPoP error, let's try one more explicit refresh
                // This is a fallback in case we just need a fresh nonce
                LogManager.logInfo("Attempting one final explicit token refresh after DPoP error")
                do {
                    _ = try await authService.refreshTokenIfNeeded()
                } catch {
                    LogManager.logError("Final explicit refresh failed: \(error)")
                    authDelegate?.authenticationRequired(client: self)
                }
            } catch {
                // If refresh fails, trigger authentication required
                authDelegate?.authenticationRequired(client: self)
            }
        }
    }

    /// Handles application startup tasks like checking for interrupted token refresh
    private func handleAppStartup() async {
        // Check for interrupted refresh operations
        await authService.handleAppStartup()
    }

    /// Call this method when your app becomes active to check token refresh state
    public func applicationDidBecomeActive() {
        Task {
            await handleAppStartup()
        }
    }
    
    // MARK: - Account Information Methods

    /// Gets the DID (Decentralized Identifier) of the current active account.
    /// - Returns: The DID string of the current account
    public func getDid() async throws -> String {
        let (did, _, _) = await getActiveAccountInfo()
        guard let did = did else {
            throw APIError.serviceNotInitialized
        }
        return did
    }

    /// Gets the handle of the current active account.
    /// - Returns: The handle string of the current account
    public func getHandle() async throws -> String {
        let (_, handle, _) = await getActiveAccountInfo()
        guard let handle = handle else {
            throw APIError.serviceNotInitialized
        }
        return handle
    }

    /// Checks if the current session is valid.
    /// - Returns: Boolean indicating whether the session is valid
    public func hasValidSession() async -> Bool {
        let (did, _, _) = await getActiveAccountInfo()
        if did == nil {
            return false
        }
        
        do {
            return try await authService.refreshTokenIfNeeded()
        } catch {
            return false
        }
    }

    /// Refreshes the access token if needed.
    /// - Returns: Boolean indicating whether token was refreshed
    /// - Throws: Error if token refresh fails
    public func refreshToken() async throws -> Bool {
        return try await authService.refreshTokenIfNeeded()
    }

    // MARK: - Moderation Methods

    /// Sets the labeler service to receive moderation reports
    /// - Parameter did: The DID of the labeler service
    public func setReportLabeler(did: String) async {
        await networkService.setHeader(name: "atproto-proxy", value: "\(did)#atproto_labeler")
    }

    /// Clears any previously set report labeler
    public func clearReportLabeler() async {
        networkService.removeHeader(name: "atproto-proxy")
    }
    


    // MARK: - Authentication Flow Methods

    /// Starts the OAuth flow for account creation
    /// - Parameter pdsURL: The PDS URL to use (defaults to bsky.social)
    /// - Returns: The authorization URL to present to the user
    public func startSignUpFlow(pdsURL: URL = URL(string: "https://bsky.social")!) async throws -> URL {
        return try await authService.startOAuthFlowForSignUp(pdsURL: pdsURL)
    }

    // MARK: - Property Access

    /// Gets the base URL of the current service
    public var baseURL: URL {
        get async {
            if let account = await accountManager.getCurrentAccount() {
                return account.pdsURL
            } else {
                return await networkService.baseURL
            }
        }
    }
    
    // MARK: - Authentication Methods
    
    /// Sets the authentication delegate.
    /// - Parameter delegate: The delegate to set.
    public func setAuthenticationDelegate(_ delegate: AuthenticationDelegate) {
        self.authDelegate = delegate
    }
    
    /// Starts the OAuth flow for authentication.
    /// - Parameter identifier: The user identifier (handle), optional for sign-up.
    /// - Returns: The authorization URL to present to the user.
    public func startOAuthFlow(identifier: String? = nil) async throws -> URL {
        return try await authService.startOAuthFlow(identifier: identifier)
    }
    
    /// Handles the OAuth callback URL after user authentication.
    /// - Parameter url: The callback URL received from the authorization server.
    public func handleOAuthCallback(url: URL) async throws {
        try await authService.handleOAuthCallback(url: url)
        
        // After successful authentication, update the base URL
        if let account = await accountManager.getCurrentAccount() {
            networkService.setBaseURL(account.pdsURL)
        }
    }
    
    /// Logs out the current user.
    public func logout() async throws {
        try await authService.logout()
    }
    
    // MARK: - Account Management
    
    /// Gets the current account information.
    /// - Returns: A tuple containing the DID, handle, and PDS URL of the current account.
    public func getActiveAccountInfo() async -> (did: String?, handle: String?, pdsURL: URL?) {
        if let account = await accountManager.getCurrentAccount() {
            return (did: account.did, handle: account.handle, pdsURL: account.pdsURL)
        } else {
            return (did: nil, handle: nil, pdsURL: nil)
        }
    }
    
    /// Lists all available accounts.
    /// - Returns: An array of accounts.
    public func listAccounts() async -> [Account] {
        return await accountManager.listAccounts()
    }
    
    /// Switches to the specified account.
    /// - Parameter did: The DID of the account to switch to.
    public func switchToAccount(did: String) async throws {
        try await accountManager.setCurrentAccount(did: did)
        
        // Update network service base URL
        if let account = await accountManager.getAccount(did: did) {
            networkService.setBaseURL(account.pdsURL)
        }
    }
    
    /// Removes an account.
    /// - Parameter did: The DID of the account to remove.
    public func removeAccount(did: String) async throws {
        try await accountManager.removeAccount(did: did)
    }
    
    // MARK: - DID Resolution
    
    /// Resolves a handle to a DID.
    /// - Parameter handle: The handle to resolve.
    /// - Returns: The resolved DID.
    public func resolveHandleToDID(handle: String) async throws -> String {
        return try await didResolver.resolveHandleToDID(handle: handle)
    }
    
    /// Resolves a DID to a PDS URL.
    /// - Parameter did: The DID to resolve.
    /// - Returns: The resolved PDS URL.
    public func resolveDIDToPDSURL(did: String) async throws -> URL {
        return try await didResolver.resolveDIDToPDSURL(did: did)
    }
    
    // MARK: - Header Management
    
    /// Sets a custom header for all requests.
    /// - Parameters:
    ///   - name: The header name.
    ///   - value: The header value.
    public func setHeader(name: String, value: String) async {
        await networkService.setHeader(name: name, value: value)
    }
    
    /// Sets the user agent for all requests.
    /// - Parameter userAgent: The user agent string.
    public func setUserAgent(_ userAgent: String) async {
        await networkService.setHeader(name: "User-Agent", value: userAgent)
    }
    
  // MARK: - Generated API Namespaced Classes
  
    {{ generated_classes }}
}
