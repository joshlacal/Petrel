extension ATProtoClient.{{ template_namespace_name }} {
    /// {{ description }}
    public func {{ procedure_name | lowerCamelCase }}(
        {% if is_blob_upload %}
        data: Data,
        mimeType: String,
        stripMetadata: Bool = true,
        {% elif input_struct_name %}
        input: {{ input_struct_name }},
        {% endif %}
        duringInitialSetup: Bool = {% if during_initial_setup %}true{% else %}false{% endif %}
    ) async throws -> {% if output_type %}(responseCode: Int, data: {{ output_type }}?){% else %}Int{% endif %} {
        let endpoint = "{{ endpoint }}"

        {% if is_blob_upload %}
        var dataToUpload = data

        if stripMetadata, let strippedData = ImageMetadataStripper.stripMetadata(from: dataToUpload) {
            dataToUpload = strippedData
        }

        if mimeType.starts(with: "image/"), let compressedData = compressImage(dataToUpload) {
            dataToUpload = compressedData
        }

        var urlRequest = try await networkManager.createURLRequest(
            endpoint: endpoint,
            method: "POST",
            headers: ["Content-Type": mimeType, "Content-Length": "\(dataToUpload.count)"],
            body: dataToUpload,
            queryItems: nil
        )
        {% else %}
        let requestData: Data? = {% if input_struct_name %}try JSONEncoder().encode(input){% else %}nil{% endif %}
        let urlRequest = try await networkManager.createURLRequest(
            endpoint: endpoint,
            method: "POST",
            headers: ["Content-Type": "application/json"],
            body: requestData,
            queryItems: nil
        )
        {% endif %}


        {% if output_type %}
                let (responseData, response) = try await networkManager.performRequest(urlRequest, retryCount: 0, duringInitialSetup: duringInitialSetup)
        let responseCode = response.statusCode

        let decodedData = try? ZippyJSONDecoder().decode({{ output_type }}.self, from: responseData)
        return (responseCode, decodedData)
        {% else %}
        
        let (_, response) = try await networkManager.performRequest(urlRequest, retryCount: 0, duringInitialSetup: duringInitialSetup)
        let responseCode = response.statusCode

        return responseCode
        {% endif %}
    }

    {% if is_blob_upload %}
    private func compressImage(_ imageData: Data, maxSizeInBytes: Int = 1000000) -> Data? {
        #if canImport(UIKit)
        guard let image = UIImage(data: imageData) else { return nil }
        var compression: CGFloat = 1.0
        var compressedData = image.jpegData(compressionQuality: compression)

        while (compressedData?.count ?? 0) > maxSizeInBytes && compression > 0.1 {
            compression -= 0.1
            compressedData = image.jpegData(compressionQuality: compression)
        }

        return compressedData
        #elseif canImport(AppKit)
        guard let image = NSImage(data: imageData) else { return nil }
        var compression: CGFloat = 1.0
        var compressedData: Data?

        repeat {
            if let tiffRepresentation = image.tiffRepresentation,
               let bitmapImage = NSBitmapImageRep(data: tiffRepresentation) {
                compressedData = bitmapImage.representation(using: .jpeg, properties: [.compressionFactor: compression])
            }
            compression -= 0.1
        } while (compressedData?.count ?? 0) > maxSizeInBytes && compression > 0.1

        return compressedData
        #else
        LogManager.logError("Image compression not supported on this platform")
        return nil
        #endif
    }
    {% endif %}
}
