        public struct {{ enum_name }}: Codable, ATProtocolCodable, ATProtocolValue {
            public let rawValue: String
            
            // Predefined constants
            {%- for value, description in values %}
            // {{ description }}
            public static let {{ value | convertRefToSwift | lowerCamelCase | enum_case }} = {{ enum_name }}(rawValue: "{{ value }}")
            {%- endfor %}
            
            public init(rawValue: String) {
                self.rawValue = rawValue
            }
            
            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                rawValue = try container.decode(String.self)
            }
            
            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                try container.encode(rawValue)
            }
            
            public func isEqual(to other: any ATProtocolValue) -> Bool {
                guard let otherValue = other as? {{ enum_name }} else { return false }
                return self.rawValue == otherValue.rawValue
            }
            
            // Provide allCases-like functionality
            public static var predefinedValues: [{{ enum_name }}] {
                return [
                    {%- for value, description in values %}
                    .{{ value | convertRefToSwift | lowerCamelCase }},
                    {%- endfor %}
                ]
            }
        }