public struct Input: ATProtocolCodable {
        {%- for prop in properties %}
            public let {{ prop.name }}: {{ prop.type }}{% if prop.optional %}?{% endif %}
        {%- endfor %}

            // Standard public initializer
            public init({% for prop in properties -%}
                {{ prop.name }}: {{ prop.type }}{% if prop.optional %}? = nil{% endif %}{% if not loop.last %}, {% endif %}
            {%- endfor %}) {
                {% for prop in properties -%}
                self.{{ prop.name }} = {{ prop.name }}
                {% endfor %}
            }
            
            public init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                {%- for prop in properties %}
                {% if prop.optional %}
                self.{{ prop.name }} = try container.decodeIfPresent({{ prop.type }}.self, forKey: .{{ prop.name }})
                {% else %}
                self.{{ prop.name }} = try container.decode({{ prop.type }}.self, forKey: .{{ prop.name }})
                {% endif %}
                {%- endfor %}
            }
            
            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: CodingKeys.self)
                {%- for prop in properties %}
                {% if prop.optional %}
                if let value = {{ prop.name }} {
                    {% if '[' in prop.type and ']' in prop.type %}
                    if !value.isEmpty {
                        try container.encode(value, forKey: .{{ prop.name }})
                    }
                    {% else %}
                    try container.encode(value, forKey: .{{ prop.name }})
                    {% endif %}
                }
                {% else %}
                try container.encode({{ prop.name }}, forKey: .{{ prop.name }})
                {% endif %}
                {%- endfor %}
            }
            
            private enum CodingKeys: String, CodingKey {
                {%- for prop in properties %}
                case {{ prop.name }}
                {%- endfor %}
            }
            
            // DAGCBOR encoding with field ordering
            public func toCBORValue() throws -> Any {
                var map = OrderedCBORMap()
                
                // Add fields in lexicon-defined order
                {% for prop in properties %}
                {% if prop.optional %}
                if let value = {{ prop.name }} {
                    {% if '[' in prop.type and ']' in prop.type %}
                    if !value.isEmpty {
                        {% set var_name = prop.name + 'Value' %}
                        let {{ var_name }} = try (value as? DAGCBOREncodable)?.toCBORValue() ?? value
                        map = map.adding(key: "{{ prop.name }}", value: {{ var_name }})
                    }
                    {% else %}
                    {% set var_name = prop.name + 'Value' %}
                    let {{ var_name }} = try (value as? DAGCBOREncodable)?.toCBORValue() ?? value
                    map = map.adding(key: "{{ prop.name }}", value: {{ var_name }})
                    {% endif %}
                }
                {% else %}
                {% set var_name = prop.name + 'Value' %}
                let {{ var_name }} = try ({{ prop.name }} as? DAGCBOREncodable)?.toCBORValue() ?? {{ prop.name }}
                map = map.adding(key: "{{ prop.name }}", value: {{ var_name }})
                {% endif %}
                {% endfor %}
                
                return map
            }
        }
