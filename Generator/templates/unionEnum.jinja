{%- if is_array %}
public struct {{ enum_struct_name }}: Codable, ATProtocolCodable, ATProtocolValue, Sendable, PendingDataLoadable, Equatable {
    public var items: [{{ name }}]

    public init(items: [{{ name }}]) {
        self.items = items
    }

    public init(from decoder: Decoder) throws {
        var container = try decoder.unkeyedContainer()
        var items: [{{ name }}] = []
        while !container.isAtEnd {
            let item = try container.decode({{ name }}.self)
            items.append(item)
        }
        self.items = items
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.unkeyedContainer()
        for item in items {
            try container.encode(item)
        }
    }

    public func hash(into hasher: inout Hasher) {
        for item in items {
            hasher.combine(item)
        }
    }

    public func isEqual(to other: any ATProtocolValue) -> Bool {
        guard let otherValue = other as? {{ enum_struct_name }} else { return false }
        return self.items == otherValue.items
    }
    
    /// Check if any items contain pending data that needs loading
    public var hasPendingData: Bool {
        items.contains { $0.hasPendingData }
    }
    
    /// Load any pending data in child items
    public mutating func loadPendingData() async {
        for i in 0..<items.count {
            if items[i].hasPendingData {
                await items[i].loadPendingData()
            }
        }
    }
}
{%- endif %}

public {{ 'indirect ' if is_recursive else '' }}enum {{ name }}: Codable, ATProtocolCodable, ATProtocolValue, Sendable, PendingDataLoadable, Equatable {
    {%- for variant in variants %}
    case {{ variant | convertRefToSwift | lowerCamelCase }}({{ variant | convertRefToSwift }})
    {%- endfor %}
    case unexpected(ATProtocolValueContainer)
    {% if is_recursive %}
    case pending(PendingDecodeData)
    
    {% endif %}

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        let typeValue = try container.decode(String.self, forKey: .type)
        {% if is_recursive %}
        let depth = decoder.codingPath.count
        
        // Check if we're at a recursion depth that might cause stack overflow
        if depth > DecodingConfiguration.standard.threshold {
            if DecodingConfiguration.standard.debugMode {
                print("üîÑ Deferring deep decode for {{ name }} at depth \(depth), type: \(typeValue)")
            }
            
            // We need to capture the full JSON data at this point
            // Get access to the original data
            if let dataDecoder = decoder as? JSONDecoder,
               let userData = dataDecoder.userInfo["originalData"] as? Data {
                
                // This is the raw JSON data we'll use later to decode this object
                self = .pending(PendingDecodeData(rawData: userData, type: typeValue))
                return
            }
            
            // Fallback if we can't get the original data
            // Store at least the type information
            let rawData = try JSONEncoder().encode(["$type": typeValue])
            self = .pending(PendingDecodeData(rawData: rawData, type: typeValue))
            return
        }
        {% endif %}

        switch typeValue {
        {%- for variant in variants %}
        case "{{ variant }}":
            let value = try {{ variant | convertRefToSwift }}(from: decoder)
            self = .{{ variant | convertRefToSwift | lowerCamelCase }}(value)
        {%- endfor %}
        default:
            let unknownValue = try ATProtocolValueContainer(from: decoder)
            self = .unexpected(unknownValue)
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        switch self {
        {%- for variant in variants %}
        case .{{ variant | convertRefToSwift | lowerCamelCase }}(let value):
            try container.encode("{{ variant }}", forKey: .type)
            try value.encode(to: encoder)
        {%- endfor %}
        case .unexpected(let container):
            try container.encode(to: encoder)
        {% if is_recursive %}
        case .pending(let pendingData):
            try container.encode(pendingData.type, forKey: .type)
        {% endif %}
        }
    }

    public func hash(into hasher: inout Hasher) {
        switch self {
        {%- for variant in variants %}
        case .{{ variant | convertRefToSwift | lowerCamelCase }}(let value):
            hasher.combine("{{ variant }}")
            hasher.combine(value)
        {%- endfor %}
        case .unexpected(let container):
            hasher.combine("unexpected")
            hasher.combine(container)
        {% if is_recursive %}
        case .pending(let pendingData):
            hasher.combine("pending")
            hasher.combine(pendingData.type)
        {% endif %}
        }
    }

    private enum CodingKeys: String, CodingKey {
        case type = "$type"
    }
    
    public static func == (lhs: {{ name }}, rhs: {{ name }}) -> Bool {
        switch (lhs, rhs) {
        {%- for variant in variants %}
        case (.{{ variant | convertRefToSwift | lowerCamelCase }}(let lhsValue),
              .{{ variant | convertRefToSwift | lowerCamelCase }}(let rhsValue)):
            return lhsValue == rhsValue
        {%- endfor %}
        case (.unexpected(let lhsValue), .unexpected(let rhsValue)):
            return lhsValue.isEqual(to: rhsValue)
        {% if is_recursive %}
        case (.pending(let lhsData), .pending(let rhsData)):
            return lhsData.type == rhsData.type
        {% endif %}
        default:
            return false
        }
    }
    
    public func isEqual(to other: any ATProtocolValue) -> Bool {
        guard other is {{ name }} else { return false }
        return self == (other as! {{ name }})
    }
    
    /// Property that indicates if this enum contains pending data that needs loading
    public var hasPendingData: Bool {
        switch self {
        {% if is_recursive %}
        case .pending:
            return true
        {% endif %}
        {%- for variant in variants %}
        case .{{ variant | convertRefToSwift | lowerCamelCase }}(let value):
            if let loadable = value as? PendingDataLoadable {
                return loadable.hasPendingData
            }
            return false
        {%- endfor %}
        case .unexpected:
            return false
        }
    }
    
    /// Attempts to load any pending data in this enum or its children
    public mutating func loadPendingData() async {
        switch self {
        {% if is_recursive %}
        case .pending(let pendingData):
            do {
                // Properly decode the stored JSON data based on the type
                switch pendingData.type {
                {%- for variant in variants %}
                case "{{ variant }}":
                    let value = try await SafeDecoder.decode(
                        {{ variant | convertRefToSwift }}.self,
                        from: pendingData.rawData
                    )
                    self = .{{ variant | convertRefToSwift | lowerCamelCase }}(value)
                {%- endfor %}
                default:
                    let unknownValue = ATProtocolValueContainer.string("Unknown type: \(pendingData.type)")
                    self = .unexpected(unknownValue)
                }
            } catch {
                if DecodingConfiguration.standard.debugMode {
                    print("‚ùå Failed to decode pending data for {{ name }}: \(error)")
                }
                self = .unexpected(ATProtocolValueContainer.string("Failed to decode: \(error)"))
            }
        {% endif %}
        {%- for variant in variants %}
        case .{{ variant | convertRefToSwift | lowerCamelCase }}(let value):
            // Check if this value conforms to PendingDataLoadable and has pending data
            if let loadable = value as? PendingDataLoadable, loadable.hasPendingData {
                // Create a new decoded value from scratch if possible
                if let jsonData = try? JSONEncoder().encode(value),
                   let decodedValue = try? await SafeDecoder.decode({{ variant | convertRefToSwift }}.self, from: jsonData) {
                    self = .{{ variant | convertRefToSwift | lowerCamelCase }}(decodedValue)
                }
            }
        {%- endfor %}
        case .unexpected:
            // Nothing to load for unexpected values
            break
        }
    }
}
