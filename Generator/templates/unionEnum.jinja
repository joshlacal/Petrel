{%- if is_array %}
public struct {{ enum_struct_name }}: Codable, ATProtocolCodable, ATProtocolValue, Sendable, Equatable {
    public var items: [{{ name }}]

    public init(items: [{{ name }}]) {
        self.items = items
    }

    public init(from decoder: Decoder) throws {
        var container = try decoder.unkeyedContainer()
        var items: [{{ name }}] = []
        while !container.isAtEnd {
            let item = try container.decode({{ name }}.self)
            items.append(item)
        }
        self.items = items
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.unkeyedContainer()
        for item in items {
            try container.encode(item)
        }
    }

    public func hash(into hasher: inout Hasher) {
        for item in items {
            hasher.combine(item)
        }
    }

    public func isEqual(to other: any ATProtocolValue) -> Bool {
        guard let otherValue = other as? {{ enum_struct_name }} else { return false }
        return self.items == otherValue.items
    }
}
{%- endif %}

public {{ 'indirect ' if is_recursive else '' }}enum {{ name }}: Codable, ATProtocolCodable, ATProtocolValue, Sendable, Equatable {
    {%- for variant in variants %}
    case {{ variant | convertRefToSwift | lowerCamelCase }}({{ variant | convertRefToSwift }})
    {%- endfor %}
    case unexpected(ATProtocolValueContainer)
    
    {%- for variant in variants %}
    public init(_ value: {{ variant | convertRefToSwift }}) {
        self = .{{ variant | convertRefToSwift | lowerCamelCase }}(value)
    }
    {%- endfor %}

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        let typeValue = try container.decode(String.self, forKey: .type)

        switch typeValue {
        {%- for variant in variants %}
        case "{{ variant }}":
            let value = try {{ variant | convertRefToSwift }}(from: decoder)
            self = .{{ variant | convertRefToSwift | lowerCamelCase }}(value)
        {%- endfor %}
        default:
            let unknownValue = try ATProtocolValueContainer(from: decoder)
            self = .unexpected(unknownValue)
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        switch self {
        {%- for variant in variants %}
        case .{{ variant | convertRefToSwift | lowerCamelCase }}(let value):
            try container.encode("{{ variant }}", forKey: .type)
            try value.encode(to: encoder)
        {%- endfor %}
        case .unexpected(let container):
            try container.encode(to: encoder)
        }
    }

    public func hash(into hasher: inout Hasher) {
        switch self {
        {%- for variant in variants %}
        case .{{ variant | convertRefToSwift | lowerCamelCase }}(let value):
            hasher.combine("{{ variant }}")
            hasher.combine(value)
        {%- endfor %}
        case .unexpected(let container):
            hasher.combine("unexpected")
            hasher.combine(container)
        }
    }

    private enum CodingKeys: String, CodingKey {
        case type = "$type"
    }
    
    public static func == (lhs: {{ name }}, rhs: {{ name }}) -> Bool {
        switch (lhs, rhs) {
        {%- for variant in variants %}
        case (.{{ variant | convertRefToSwift | lowerCamelCase }}(let lhsValue),
              .{{ variant | convertRefToSwift | lowerCamelCase }}(let rhsValue)):
            return lhsValue == rhsValue
        {%- endfor %}
        case (.unexpected(let lhsValue), .unexpected(let rhsValue)):
            return lhsValue.isEqual(to: rhsValue)
        default:
            return false
        }
    }
    
    public func isEqual(to other: any ATProtocolValue) -> Bool {
        guard let other = other as? {{ name }} else { return false }
        return self == other
    }
    
    // DAGCBOR encoding with field ordering
    public func toCBORValue() throws -> Any {
        // Create an ordered map to maintain field order
        var map = OrderedCBORMap()
        
        switch self {
        {%- for variant in variants %}
        case .{{ variant | convertRefToSwift | lowerCamelCase }}(let value):
            map = map.adding(key: "$type", value: "{{ variant }}")
            
            let valueDict = try value.toCBORValue()

            // If the value is already an OrderedCBORMap, merge its entries
            if let orderedMap = valueDict as? OrderedCBORMap {
                for (key, value) in orderedMap.entries where key != "$type" {
                    map = map.adding(key: key, value: value)
                }
            } else if let dict = valueDict as? [String: Any] {
                // Otherwise add each key-value pair from the dictionary
                for (key, value) in dict where key != "$type" {
                    map = map.adding(key: key, value: value)
                }
            }
            return map
        {%- endfor %}
        case .unexpected(let container):
            return try container.toCBORValue()
        }
    }
}
